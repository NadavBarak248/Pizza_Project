@model Store_Project.Models.Branch

@{
    ViewData["Title"] = "Edit";
}

<h1>Edit</h1>

<h4>Branch</h4>
<hr />
<div class="row">
    <div class="col-md-4 backdidplay">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="id" />
            <div class="form-group">
                <label asp-for="Branch_name" class="control-label"></label>
                <input asp-for="Branch_name" class="form-control" />
                <span asp-validation-for="Branch_name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="location" class="control-label"></label>
                <input asp-for="location" class="form-control" />
                <span asp-validation-for="location" class="text-danger"></span>
            </div>
            <br />
            <br />

            <div style="display: none">
                <input id="pac-input"
                       class="controls"
                       type="text"
                       placeholder="Enter a location"
                       style="width:200px" />
            </div>
            <div id="map" style="width: 500px; height:400px;"></div>
            <div hidden id="infowindow-content">
                <span id="place-name" class="title"></span><br />
                <strong>Place ID:</strong> <span id="place-id"></span><br />
                <span id="place-address"></span>
            </div>
            <br />
            <br />
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
                <a type="button" class="btn btn-info" asp-action="Index">Back</a>
                <input type="button" value="Delete" class="btn btn-danger" data-toggle="modal" data-target="#Delete">

                <!-- Modal -->
                <div class="modal fade" id="Delete" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
                    <div class="modal-dialog modal-dialog-centered" role="document">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="exampleModalLongTitle">Delete</h5>
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                    <span aria-hidden="true">&times;</span>
                                </button>
                            </div>
                            <div class="modal-body">
                                Are you sure you want to delete "@Html.DisplayFor(model => model.Branch_name)"?
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                                <a class="btn btn-danger" asp-action="Delete" asp-route-id="@Model.id">Delete</a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </form>
    </div>
</div>



@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}



<script>
    function initMap() {
        const map = new google.maps.Map(document.getElementById("map"), {
            center: { lat: 32.082796, lng: 34.793785 },
            zoom: 13,
        });
        const input = document.getElementById("pac-input");
        const autocomplete = new google.maps.places.Autocomplete(input);
        autocomplete.bindTo("bounds", map);
        // Specify just the place data fields that you need.
        autocomplete.setFields(["place_id", "geometry", "formatted_address", "name"]);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
        const infowindow = new google.maps.InfoWindow();
        const infowindowContent = document.getElementById("infowindow-content");
        infowindow.setContent(infowindowContent);
        const marker = new google.maps.Marker({ map: map });
        marker.addListener("click", () => {
            infowindow.open(map, marker);
        });
        autocomplete.addListener("place_changed", () => {
            infowindow.close();
            const place = autocomplete.getPlace();

            if (!place.geometry || !place.geometry.location) {
                return;
            }

            if (place.geometry.viewport) {
                map.fitBounds(place.geometry.viewport);
            } else {
                map.setCenter(place.geometry.location);
                map.setZoom(17);
            }
            // Set the position of the marker using the place ID and location.
            marker.setPlace({
                placeId: place.place_id,
                location: place.geometry.location,
            });
            marker.setVisible(true);
            infowindowContent.children.namedItem("place-name").textContent = place.name;
            infowindowContent.children.namedItem("place-id").textContent =
                place.place_id;
            infowindowContent.children.namedItem("place-address").textContent =
                place.formatted_address;
            infowindow.open(map, marker);
            document.getElementById("location").value = place.place_id;
        });
    }
</script>


<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyD97JqUBFWSHsjXRxWA89BF1sRV2l5GZho&callback=initMap&libraries=places&v=weekly"
        async></script>