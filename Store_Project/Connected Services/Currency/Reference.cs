//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Currency
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://webservices.cloanto.com/currencyserver/", ConfigurationName="Currency.CurrencyServerSoap")]
    public interface CurrencyServerSoap
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/AdminLoad", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task AdminLoadAsync(string licenseKey, string file);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/AdminMessage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task AdminMessageAsync(string licenseKey, string text, int type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/AdminSave", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task AdminSaveAsync(string licenseKey, string file);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/AdminUpdateNow", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task AdminUpdateNowAsync(string licenseKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/ConvertToNum", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<double> ConvertToNumAsync(string licenseKey, string fromCurrency, string toCurrency, double amount, bool rounding, string date, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/ConvertToStr", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> ConvertToStrAsync(string licenseKey, string fromCurrency, string toCurrency, double amount, bool rounding, string format, string date, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/CountryToCurrency", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> CountryToCurrencyAsync(string licenseKey, string country, bool activeOnly);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/Currencies", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> CurrenciesAsync(string licenseKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/CurrencyCustom", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> CurrencyCustomAsync(string licenseKey, string currency, string locale);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/CurrencyExists", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> CurrencyExistsAsync(string licenseKey, string currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/CurrencyHits", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<long> CurrencyHitsAsync(string licenseKey, string currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/CurrencyLastChangeTimeLocal", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> CurrencyLastChangeTimeLocalAsync(string licenseKey, string currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/CurrencyLastChangeTimeUT", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> CurrencyLastChangeTimeUTAsync(string licenseKey, string currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/CurrencyLegalTender", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> CurrencyLegalTenderAsync(string licenseKey, string currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/CurrencyName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> CurrencyNameAsync(string licenseKey, string currency, string locale, bool titleStyle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/CurrencyPhysical", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> CurrencyPhysicalAsync(string licenseKey, string currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/CurrencyRegime", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> CurrencyRegimeAsync(string licenseKey, string currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/CurrencySecondsSinceLastChange", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<long> CurrencySecondsSinceLastChangeAsync(string licenseKey, string currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/CurrencyServers", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<long> CurrencyServersAsync(string licenseKey, string currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/CurrencySmallestUnit", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> CurrencySmallestUnitAsync(string licenseKey, string currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/CurrencySubUnit", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> CurrencySubUnitAsync(string licenseKey, string currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/CurrencySymbol", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> CurrencySymbolAsync(string licenseKey, string currency, string locale);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/CurrencyWarning", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> CurrencyWarningAsync(string licenseKey, string currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/CurrentTimeLocal", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> CurrentTimeLocalAsync(string licenseKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/CurrentTimeUT", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> CurrentTimeUTAsync(string licenseKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/DomainToCurrency", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> DomainToCurrencyAsync(string licenseKey, string domain, bool activeOnly);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/InformationCopyright", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> InformationCopyrightAsync(string licenseKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/InformationCreationTimeLocal", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> InformationCreationTimeLocalAsync(string licenseKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/InformationCreationTimeUT", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> InformationCreationTimeUTAsync(string licenseKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/InformationExpirationTimeLocal", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> InformationExpirationTimeLocalAsync(string licenseKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/InformationExpirationTimeUT", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> InformationExpirationTimeUTAsync(string licenseKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/InformationMessage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> InformationMessageAsync(string licenseKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/InformationSource", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> InformationSourceAsync(string licenseKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/LastChangeTimeLocal", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> LastChangeTimeLocalAsync(string licenseKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/LastChangeTimeUT", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> LastChangeTimeUTAsync(string licenseKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/LocaleToCurrency", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> LocaleToCurrencyAsync(string licenseKey, string locale, bool activeOnly);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/RateNum", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<double> RateNumAsync(string licenseKey, string baseCurrency, string toCurrency, bool rounding, string date, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/RateStr", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> RateStrAsync(string licenseKey, string baseCurrency, string toCurrency, bool rounding, string format, string date, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/RateTimeLocal", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> RateTimeLocalAsync(string licenseKey, string baseCurrency, string toCurrency, string priority, string date, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/RateTimeUT", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> RateTimeUTAsync(string licenseKey, string baseCurrency, string toCurrency, string priority, string date, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/SecondsSinceLastChange", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<long> SecondsSinceLastChangeAsync(string licenseKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/Version", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> VersionAsync(string licenseKey);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface CurrencyServerSoapChannel : Currency.CurrencyServerSoap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class CurrencyServerSoapClient : System.ServiceModel.ClientBase<Currency.CurrencyServerSoap>, Currency.CurrencyServerSoap
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public CurrencyServerSoapClient(EndpointConfiguration endpointConfiguration) : 
                base(CurrencyServerSoapClient.GetBindingForEndpoint(endpointConfiguration), CurrencyServerSoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CurrencyServerSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(CurrencyServerSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CurrencyServerSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(CurrencyServerSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CurrencyServerSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task AdminLoadAsync(string licenseKey, string file)
        {
            return base.Channel.AdminLoadAsync(licenseKey, file);
        }
        
        public System.Threading.Tasks.Task AdminMessageAsync(string licenseKey, string text, int type)
        {
            return base.Channel.AdminMessageAsync(licenseKey, text, type);
        }
        
        public System.Threading.Tasks.Task AdminSaveAsync(string licenseKey, string file)
        {
            return base.Channel.AdminSaveAsync(licenseKey, file);
        }
        
        public System.Threading.Tasks.Task AdminUpdateNowAsync(string licenseKey)
        {
            return base.Channel.AdminUpdateNowAsync(licenseKey);
        }
        
        public System.Threading.Tasks.Task<double> ConvertToNumAsync(string licenseKey, string fromCurrency, string toCurrency, double amount, bool rounding, string date, string type)
        {
            return base.Channel.ConvertToNumAsync(licenseKey, fromCurrency, toCurrency, amount, rounding, date, type);
        }
        
        public System.Threading.Tasks.Task<string> ConvertToStrAsync(string licenseKey, string fromCurrency, string toCurrency, double amount, bool rounding, string format, string date, string type)
        {
            return base.Channel.ConvertToStrAsync(licenseKey, fromCurrency, toCurrency, amount, rounding, format, date, type);
        }
        
        public System.Threading.Tasks.Task<string> CountryToCurrencyAsync(string licenseKey, string country, bool activeOnly)
        {
            return base.Channel.CountryToCurrencyAsync(licenseKey, country, activeOnly);
        }
        
        public System.Threading.Tasks.Task<string> CurrenciesAsync(string licenseKey)
        {
            return base.Channel.CurrenciesAsync(licenseKey);
        }
        
        public System.Threading.Tasks.Task<string> CurrencyCustomAsync(string licenseKey, string currency, string locale)
        {
            return base.Channel.CurrencyCustomAsync(licenseKey, currency, locale);
        }
        
        public System.Threading.Tasks.Task<bool> CurrencyExistsAsync(string licenseKey, string currency)
        {
            return base.Channel.CurrencyExistsAsync(licenseKey, currency);
        }
        
        public System.Threading.Tasks.Task<long> CurrencyHitsAsync(string licenseKey, string currency)
        {
            return base.Channel.CurrencyHitsAsync(licenseKey, currency);
        }
        
        public System.Threading.Tasks.Task<string> CurrencyLastChangeTimeLocalAsync(string licenseKey, string currency)
        {
            return base.Channel.CurrencyLastChangeTimeLocalAsync(licenseKey, currency);
        }
        
        public System.Threading.Tasks.Task<string> CurrencyLastChangeTimeUTAsync(string licenseKey, string currency)
        {
            return base.Channel.CurrencyLastChangeTimeUTAsync(licenseKey, currency);
        }
        
        public System.Threading.Tasks.Task<bool> CurrencyLegalTenderAsync(string licenseKey, string currency)
        {
            return base.Channel.CurrencyLegalTenderAsync(licenseKey, currency);
        }
        
        public System.Threading.Tasks.Task<string> CurrencyNameAsync(string licenseKey, string currency, string locale, bool titleStyle)
        {
            return base.Channel.CurrencyNameAsync(licenseKey, currency, locale, titleStyle);
        }
        
        public System.Threading.Tasks.Task<bool> CurrencyPhysicalAsync(string licenseKey, string currency)
        {
            return base.Channel.CurrencyPhysicalAsync(licenseKey, currency);
        }
        
        public System.Threading.Tasks.Task<string> CurrencyRegimeAsync(string licenseKey, string currency)
        {
            return base.Channel.CurrencyRegimeAsync(licenseKey, currency);
        }
        
        public System.Threading.Tasks.Task<long> CurrencySecondsSinceLastChangeAsync(string licenseKey, string currency)
        {
            return base.Channel.CurrencySecondsSinceLastChangeAsync(licenseKey, currency);
        }
        
        public System.Threading.Tasks.Task<long> CurrencyServersAsync(string licenseKey, string currency)
        {
            return base.Channel.CurrencyServersAsync(licenseKey, currency);
        }
        
        public System.Threading.Tasks.Task<string> CurrencySmallestUnitAsync(string licenseKey, string currency)
        {
            return base.Channel.CurrencySmallestUnitAsync(licenseKey, currency);
        }
        
        public System.Threading.Tasks.Task<bool> CurrencySubUnitAsync(string licenseKey, string currency)
        {
            return base.Channel.CurrencySubUnitAsync(licenseKey, currency);
        }
        
        public System.Threading.Tasks.Task<string> CurrencySymbolAsync(string licenseKey, string currency, string locale)
        {
            return base.Channel.CurrencySymbolAsync(licenseKey, currency, locale);
        }
        
        public System.Threading.Tasks.Task<bool> CurrencyWarningAsync(string licenseKey, string currency)
        {
            return base.Channel.CurrencyWarningAsync(licenseKey, currency);
        }
        
        public System.Threading.Tasks.Task<string> CurrentTimeLocalAsync(string licenseKey)
        {
            return base.Channel.CurrentTimeLocalAsync(licenseKey);
        }
        
        public System.Threading.Tasks.Task<string> CurrentTimeUTAsync(string licenseKey)
        {
            return base.Channel.CurrentTimeUTAsync(licenseKey);
        }
        
        public System.Threading.Tasks.Task<string> DomainToCurrencyAsync(string licenseKey, string domain, bool activeOnly)
        {
            return base.Channel.DomainToCurrencyAsync(licenseKey, domain, activeOnly);
        }
        
        public System.Threading.Tasks.Task<string> InformationCopyrightAsync(string licenseKey)
        {
            return base.Channel.InformationCopyrightAsync(licenseKey);
        }
        
        public System.Threading.Tasks.Task<string> InformationCreationTimeLocalAsync(string licenseKey)
        {
            return base.Channel.InformationCreationTimeLocalAsync(licenseKey);
        }
        
        public System.Threading.Tasks.Task<string> InformationCreationTimeUTAsync(string licenseKey)
        {
            return base.Channel.InformationCreationTimeUTAsync(licenseKey);
        }
        
        public System.Threading.Tasks.Task<string> InformationExpirationTimeLocalAsync(string licenseKey)
        {
            return base.Channel.InformationExpirationTimeLocalAsync(licenseKey);
        }
        
        public System.Threading.Tasks.Task<string> InformationExpirationTimeUTAsync(string licenseKey)
        {
            return base.Channel.InformationExpirationTimeUTAsync(licenseKey);
        }
        
        public System.Threading.Tasks.Task<string> InformationMessageAsync(string licenseKey)
        {
            return base.Channel.InformationMessageAsync(licenseKey);
        }
        
        public System.Threading.Tasks.Task<string> InformationSourceAsync(string licenseKey)
        {
            return base.Channel.InformationSourceAsync(licenseKey);
        }
        
        public System.Threading.Tasks.Task<string> LastChangeTimeLocalAsync(string licenseKey)
        {
            return base.Channel.LastChangeTimeLocalAsync(licenseKey);
        }
        
        public System.Threading.Tasks.Task<string> LastChangeTimeUTAsync(string licenseKey)
        {
            return base.Channel.LastChangeTimeUTAsync(licenseKey);
        }
        
        public System.Threading.Tasks.Task<string> LocaleToCurrencyAsync(string licenseKey, string locale, bool activeOnly)
        {
            return base.Channel.LocaleToCurrencyAsync(licenseKey, locale, activeOnly);
        }
        
        public System.Threading.Tasks.Task<double> RateNumAsync(string licenseKey, string baseCurrency, string toCurrency, bool rounding, string date, string type)
        {
            return base.Channel.RateNumAsync(licenseKey, baseCurrency, toCurrency, rounding, date, type);
        }
        
        public System.Threading.Tasks.Task<string> RateStrAsync(string licenseKey, string baseCurrency, string toCurrency, bool rounding, string format, string date, string type)
        {
            return base.Channel.RateStrAsync(licenseKey, baseCurrency, toCurrency, rounding, format, date, type);
        }
        
        public System.Threading.Tasks.Task<string> RateTimeLocalAsync(string licenseKey, string baseCurrency, string toCurrency, string priority, string date, string type)
        {
            return base.Channel.RateTimeLocalAsync(licenseKey, baseCurrency, toCurrency, priority, date, type);
        }
        
        public System.Threading.Tasks.Task<string> RateTimeUTAsync(string licenseKey, string baseCurrency, string toCurrency, string priority, string date, string type)
        {
            return base.Channel.RateTimeUTAsync(licenseKey, baseCurrency, toCurrency, priority, date, type);
        }
        
        public System.Threading.Tasks.Task<long> SecondsSinceLastChangeAsync(string licenseKey)
        {
            return base.Channel.SecondsSinceLastChangeAsync(licenseKey);
        }
        
        public System.Threading.Tasks.Task<string> VersionAsync(string licenseKey)
        {
            return base.Channel.VersionAsync(licenseKey);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.CurrencyServerSoap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.CurrencyServerSoap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
                httpBindingElement.AllowCookies = true;
                httpBindingElement.MaxBufferSize = int.MaxValue;
                httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.CurrencyServerSoap))
            {
                return new System.ServiceModel.EndpointAddress("http://fx.currencysystem.com/webservices/CurrencyServer4.asmx");
            }
            if ((endpointConfiguration == EndpointConfiguration.CurrencyServerSoap12))
            {
                return new System.ServiceModel.EndpointAddress("http://fx.currencysystem.com/webservices/CurrencyServer4.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            CurrencyServerSoap,
            
            CurrencyServerSoap12,
        }
    }
}
